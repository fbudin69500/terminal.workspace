# Configure environment per workspace

# The configuration is defined in a file called .workspace.config
# that is contained in any folder. If such a file is found
# in the current folder or any of its parents, this file
# is sourced.

# Functions defined in module files contained in the subdirectory
# called "modules" are used to activate and deactivate the current
# workspace.

# `${module}_activate_workspace and `${module}_deactivate_workspace`
# can be defined to run actions that are executed when a workspace
# is activated (entering) or deactivated (leaving).

# Limitation:
# There is currently no clean way to detect if `.workspace.config` is called
# to activate or deactivate a workspace.
# TODO: Add a mechanism to let `.workspace.config` know that it is called to
# activate or deactivate the workspace, possibly using a variable
# such as `local workspace_deactivate`.



# Search for project config file in current directory and
# recursively in parent directories until root directory is found.


# Use `WORKSPACE_CONFIG_LOOK_UP` environment variable to avoid
# calling the function recursively when changing folder inside
# the folder configuration file.

function _function_lock {
    export WORKSPACE_CONFIG_LOOK_UP=1
    $@
    unset WORKSPACE_CONFIG_LOOK_UP
}

# Deactivate workspace
# Deactivate virtual environment, unload packages, remove
# environment variables.
function _deactivate_workspace {
    if [[ -f "$CURRENT_WORKSPACE/$config_filename" ]]; then
        source "$CURRENT_WORKSPACE/$config_filename"
        for func in $list_deactivate_functions
        do
            $func
        done
    fi
    unset CURRENT_WORKSPACE
}

# Manually deactivate a workspace
function deactivate_workspace {
    local current_path=$1
    _function_lock _deactivate_workspace
}

# Activate workspace
# Activate virtual environment, load packages.
function _activate_workspace {
    source "$current_path/$config_filename"
    export CURRENT_WORKSPACE=$current_path
    for func in $list_activate_functions
    do
        $func
    done
}

# Manually activate a workspace
function activate_workspace {
    config_filename=".workspace.config"
    if [[ $# -ne 1 ]] || [[ ! -f $1/$config_filename ]]; then
        echo "Function requires one argument: valid workspace directory"
        return 1
    fi
    local current_path=$1
    # First deactivate previous workspace
    _function_lock _deactivate_workspace
    # Then activate new workspace
    _function_lock _activate_workspace
}

# Function called when one changes folder.
function chpwd {
    if [[ -n $WORKSPACE_CONFIG_LOOK_UP ]]; then
        return 0
    fi
    local current_path=`pwd`
    config_filename=".workspace.config"
    while [[ $current_path != / ]];
    do
        res=`find "$current_path" -maxdepth 1 -mindepth 1 -name $config_filename`
        if [[ -f $res ]]
        then
            # If same workspace as before, do nothing to save time
            if [[ `dirname $res` == "$CURRENT_WORKSPACE" ]]; then
                return 0
            fi
            # First deactivate previous workspace
            _function_lock _deactivate_workspace
            # Then activate new workspace
            _function_lock _activate_workspace
            return 0
        fi
        current_path="$(readlink -f "$current_path"/..)"
    done
    _function_lock _deactivate_workspace
    unset WORKSPACE_CONFIG_LOOK_UP
}

function _add_function_to_list {
  # Check if functions exist and add them to list of available functions
  function_name=$1$2
  $(type -f $function_name)
  if [[ $? == 0 ]]; then
    echo $function_name
    return
  fi
}

# Get this script directory
if [ -n "$ZSH_VERSION" ]; then
   # assume Zsh
    DIR="$(dirname ${(%):-%N})"
else
   # assume Bash
   # Do not check "$BASH_VERSION"
   DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
fi

#Expected functions
local activate_function_suffix="_activate_workspace"
local deactivate_function_suffix="_deactivate_workspace"
# Load all modules

for name in $(find $DIR/modules/*);
do
  # Get module name
  source $name
  module=$(echo $name | sed -n 's;[^-]*-\(.*\);\1;p')
  list_activate_functions+=($(_add_function_to_list $module $activate_function_suffix))
  list_deactivate_functions+=($(_add_function_to_list $module $deactivate_function_suffix))
done

# Force call chpwd when sourcing this file.
chpwd
