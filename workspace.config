# Configure environment per workspace

# The configuration is defined in a file called .workspace.config
# that is contained in any folder. If such a file is found
# in the current folder or any of its parents, this file
# is sourced. The following variables can be defined in a
#`.workspace.config` file:

# * `workspace_virtual_env`: This variable defines the Python virtual
# environment that is automatically loaded when working in
# the current workspace.
# * `workspace_spack_packages`: This variable defines the list of
# spack packages that are automatically loaded when working in
# the current workspace.

# These variables should be defined as `local` variables to avoid
# polluting the environment.

# These variables are convenient as they are understood by the
# functions defined in this file, and will automatically
# load the correct modules when entering in the workspace,
# unload the modules when leaving the workspace, activate the
# current virtual environment when entering in the workspace,
# and deactivating the virtual environment when leaving the workspace.

# Limitation:
# There is currently no clean way to detect if `.workspace.config` is called
# to activate or deactivate a workspace.
# TODO: Add a mechanism to let `.workspace.config` know that it is called to
# activate or deactivate the workspace, possibly using a variable
# such as `local workspace_deactivate`.



# Search for project config file in current directory and
# recursively in parent directories until root directory is found.


# Use `WORKSPACE_CONFIG_LOOK_UP` environment variable to avoid
# calling the function recursively when changing folder inside
# the folder configuration file.

function _function_lock {
    export WORKSPACE_CONFIG_LOOK_UP=1
    $@
    unset WORKSPACE_CONFIG_LOOK_UP
}

# Deactivate workspace
# Deactivate virtual environment, unload packages, remove
# environment variables.
function deactivate_workspace {
    if [[ -f "$CURRENT_WORKSPACE/$config_filename" ]]; then
        source "$CURRENT_WORKSPACE/$config_filename"
        if [[ -n "$workspace_virtual_env" ]]; then
            deactivate
        fi
        if [[ -n "$workspace_spack_packages" ]]; then
            for package in ${workspace_spack_packages[@]}; do
                spack unload $package
            done
        fi
    fi
    unset CURRENT_WORKSPACE
}

# Activate workspace
# Activate virtual environment, load packages.
function activate_workspace {
    source "$current_path/$config_filename"
    export CURRENT_WORKSPACE=$current_path
    if [[ -n "$workspace_virtual_env" ]]; then
        workon $workspace_virtual_env
    fi
    if [[ -n "$workspace_spack_packages" ]]; then
        for package in ${workspace_spack_packages[@]}; do
            spack load $package
        done
    fi
}

# Function called when one changes folder.
function chpwd {
    if [[ -n $WORKSPACE_CONFIG_LOOK_UP ]]; then
        return 0
    fi
    local current_path=`pwd`
    config_filename=".workspace.config"
    while [[ $current_path != / ]];
    do
        res=`find "$current_path" -maxdepth 1 -mindepth 1 -name $config_filename`
        if [[ -f $res ]]
        then
            # First deactivate previous workspace
            _function_lock deactivate_workspace
            # Then activate new workspace
            _function_lock activate_workspace
            return 0
        fi
        current_path="$(readlink -f "$current_path"/..)"
    done
    _function_lock deactivate_workspace
    unset WORKSPACE_CONFIG_LOOK_UP
}

# Force call chpwd when sourcing this file.
chpwd
